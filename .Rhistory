i=3
for(n in numbers){
if(n > i){
break
}
if(n == i){
dp[[i]] = append(dp[[i]], list(n))
}else{
for(i in 1:length(dp[[i-n]])){
if(n >= dp[[i-n]][[i]][-1]){
dp[[i]] = append(dp[[i]], list(c(dp[[i-n]][[i]], n)))
}
}
}
}
i
n
i=3
n=2
if(n > i){
break
}
if(n == i){
dp[[i]] = append(dp[[i]], list(n))
}else{
for(i in 1:length(dp[[i-n]])){
if(n >= dp[[i-n]][[i]][-1]){
dp[[i]] = append(dp[[i]], list(c(dp[[i-n]][[i]], n)))
}
}
}
# make a list of lists of vectors
dp = list()
for(i in 1:target){
dp[[i]] = list()
}
i=1
for(n in numbers){
if(n > i){
break
}
if(n == i){
dp[[i]] = append(dp[[i]], list(n))
}else{
for(j in 1:length(dp[[i-n]])){
if(n >= dp[[i-n]][[j]][-1]){
dp[[i]] = append(dp[[i]], list(c(dp[[i-n]][[j]], n)))
}
}
}
}
i=2
for(n in numbers){
if(n > i){
break
}
if(n == i){
dp[[i]] = append(dp[[i]], list(n))
}else{
for(j in 1:length(dp[[i-n]])){
if(n >= dp[[i-n]][[j]][-1]){
dp[[i]] = append(dp[[i]], list(c(dp[[i-n]][[j]], n)))
}
}
}
}
i=3
for(n in numbers){
if(n > i){
break
}
if(n == i){
dp[[i]] = append(dp[[i]], list(n))
}else{
for(j in 1:length(dp[[i-n]])){
if(n >= dp[[i-n]][[j]][-1]){
dp[[i]] = append(dp[[i]], list(c(dp[[i-n]][[j]], n)))
}
}
}
}
i
n
dp[[i-n]]
for(j in 1:length(dp[[i-n]])){print(j)}
dp = list()
for(i in 1:target){
dp[[i]] = list()
}
i=1
for(n in numbers){
if(n > i){
break
}
if(n == i){
dp[[i]] = append(dp[[i]], list(n))
}else{
if(length(dp[[i-n]]) > 0){
for(j in 1:length(dp[[i-n]])){
if(n >= dp[[i-n]][[j]][-1]){
dp[[i]] = append(dp[[i]], list(c(dp[[i-n]][[j]], n)))
}
}
}
}
}
u=2
i=2
for(n in numbers){
if(n > i){
break
}
if(n == i){
dp[[i]] = append(dp[[i]], list(n))
}else{
if(length(dp[[i-n]]) > 0){
for(j in 1:length(dp[[i-n]])){
if(n >= dp[[i-n]][[j]][-1]){
dp[[i]] = append(dp[[i]], list(c(dp[[i-n]][[j]], n)))
}
}
}
}
}
i=3
for(n in numbers){
if(n > i){
break
}
if(n == i){
dp[[i]] = append(dp[[i]], list(n))
}else{
if(length(dp[[i-n]]) > 0){
for(j in 1:length(dp[[i-n]])){
if(n >= dp[[i-n]][[j]][-1]){
dp[[i]] = append(dp[[i]], list(c(dp[[i-n]][[j]], n)))
}
}
}
}
}
i=4
dp
n=2
if(n > i){
break
}
n == i
dp[[i-n]]
length(dp[[i-n]]) > 0
for(j in 1:length(dp[[i-n]])){ print(j) }
dp[[i-n]][[j]][-1]
dp[[i-n]][[j]]
currnums = dp[[i-n]][[j]]
currnums
currnums = dp[[i-n]][[j]]
if(length(currnums) == 1){
lastnum = currnums
}else{
lastnum = currnums[-1]
}
lastnum
n >= lastnum
dp[[i]]
dp[[i-n]][[j]]
c(dp[[i-n]][[j]], n)
list(c(dp[[i-n]][[j]], n))
combinationSum = function(numbers, target){
numbers = numbers[order(numbers, decreasing = FALSE)]
# make a list of lists of vectors
dp = list()
for(i in 1:target){
dp[[i]] = list()
}
for(i in 1:target){
for(n in numbers){
if(n > i){
break
}
if(n == i){
dp[[i]] = append(dp[[i]], list(n))
}else{
if(length(dp[[i-n]]) > 0){
for(j in 1:length(dp[[i-n]])){
currnums = dp[[i-n]][[j]]
if(length(currnums) == 1){
lastnum = currnums
}else{
lastnum = currnums[-1]
}
if(n >= lastnum){
dp[[i]] = append(dp[[i]], list(c(dp[[i-n]][[j]], n)))
}
}
}
}
}
}
return(dp[[target]])
}
combinationSum(c(2,3,5),8)
combinationSum = function(numbers, target){
numbers = numbers[order(numbers, decreasing = FALSE)]
# make a list of lists of vectors
dp = list()
for(i in 1:target){
dp[[i]] = list()
}
for(i in 1:target){
for(n in numbers){
if(n > i){
break
}
if(n == i){
dp[[i]] = append(dp[[i]], list(n))
}else{
if(length(dp[[i-n]]) > 0){
for(j in 1:length(dp[[i-n]])){
currnums = dp[[i-n]][[j]]
print(currnums)
if(length(currnums) == 1){
lastnum = currnums
}else{
lastnum = currnums[-1]
}
if(n >= lastnum){
dp[[i]] = append(dp[[i]], list(c(dp[[i-n]][[j]], n)))
}
}
}
}
}
}
return(dp[[target]])
}
combinationSum(c(2,3,5),8)
combinationSum = function(numbers, target){
numbers = numbers[order(numbers, decreasing = FALSE)]
# make a list of lists of vectors
dp = list()
for(i in 1:target){
dp[[i]] = list()
}
for(i in 1:target){
for(n in numbers){
if(n > i){
break
}
if(n == i){
dp[[i]] = append(dp[[i]], list(n))
}else{
if(length(dp[[i-n]]) > 0){
for(j in 1:length(dp[[i-n]])){
currnums = dp[[i-n]][[j]]
print(currnums)
if(length(currnums) == 1){
lastnum = currnums
}else{
lastnum = currnums[-1]
}
print(sprintf("n: %s, lastnum: %s, currnums: %s", n, lastnum, paste0(currnums, collapse=",")))
if(n >= lastnum){
dp[[i]] = append(dp[[i]], list(c(dp[[i-n]][[j]], n)))
}
}
}
}
}
}
return(dp[[target]])
}
combinationSum(c(2,3,5),8)
currnums = c(2,2,2)
currnums[-1]
currnums[length(currnums)
]
combinationSum = function(numbers, target){
numbers = numbers[order(numbers, decreasing = FALSE)]
# make a list of lists of vectors
dp = list()
for(i in 1:target){
dp[[i]] = list()
}
for(i in 1:target){
for(n in numbers){
if(n > i){
break
}
if(n == i){
dp[[i]] = append(dp[[i]], list(n))
}else{
if(length(dp[[i-n]]) > 0){
for(j in 1:length(dp[[i-n]])){
currnums = dp[[i-n]][[j]]
print(currnums)
if(length(currnums) == 1){
lastnum = currnums
}else{
lastnum = currnums[length(currnums)]
}
print(sprintf("n: %s, lastnum: %s, currnums: %s", n, lastnum, paste0(currnums, collapse=",")))
if(n >= lastnum){
dp[[i]] = append(dp[[i]], list(c(dp[[i-n]][[j]], n)))
}
}
}
}
}
}
return(dp[[target]])
}
combinationSum(c(2,3,5),8)
combinationSum = function(numbers, target){
numbers = numbers[order(numbers, decreasing = FALSE)]
# make a list of lists of vectors
dp = list()
for(i in 1:target){
dp[[i]] = list()
}
for(i in 1:target){
for(n in numbers){
if(n > i){
break
}
if(n == i){
dp[[i]] = append(dp[[i]], list(n))
}else{
if(length(dp[[i-n]]) > 0){
for(j in 1:length(dp[[i-n]])){
currnums = dp[[i-n]][[j]]
print(currnums)
if(length(currnums) == 1){
lastnum = currnums
}else{
lastnum = currnums[length(currnums)]
}
print(sprintf("n: %s, lastnum: %s, currnums: %s", n, lastnum, paste0(currnums, collapse=",")))
if(n >= lastnum){
dp[[i]] = append(dp[[i]], list(c(dp[[i-n]][[j]], n)))
}
}
}
}
print(sprintf("i: %s, n: %s", i, n))
print(dp)
print("===")
}
}
return(dp[[target]])
}
combinationSum(c(2,3,5),8)
numbers = numbers[order(numbers, decreasing = FALSE)]
# make a list of lists of vectors
dp = list()
for(i in 1:target){
dp[[i]] = list()
}
for(i in 1:target){
for(n in numbers){
if(n > i){
break
}
if(n == i){
dp[[i]] = append(dp[[i]], list(n))
}else{
if(length(dp[[i-n]]) > 0){
for(j in 1:length(dp[[i-n]])){
currnums = dp[[i-n]][[j]]
print(currnums)
if(length(currnums) == 1){
lastnum = currnums
}else{
lastnum = currnums[length(currnums)]
}
if(n >= lastnum){
dp[[i]] = append(dp[[i]], list(c(dp[[i-n]][[j]], n)))
}
}
}
}
}
}
dp[[target]]
# format into vector
unlist(dp[[target]])
c(c(1,2,3), c(4,5))
list(c(1,2,3), c(4,5))
combinationSum = function(numbers, target){
numbers = numbers[order(numbers, decreasing = FALSE)]
# make a list of lists of vectors
dp = list()
for(i in 1:target){
dp[[i]] = list()
}
for(i in 1:target){
for(n in numbers){
if(n > i){
break
}
if(n == i){
dp[[i]] = append(dp[[i]], list(n))
}else{
if(length(dp[[i-n]]) > 0){
for(j in 1:length(dp[[i-n]])){
currnums = dp[[i-n]][[j]]
print(currnums)
if(length(currnums) == 1){
lastnum = currnums
}else{
lastnum = currnums[length(currnums)]
}
if(n >= lastnum){
dp[[i]] = append(dp[[i]], list(c(dp[[i-n]][[j]], n)))
}
}
}
}
}
}
return(dp[[target]])
}
combinationSum(c(2,3,5),8)
res = combinationSum(c(2,3,5),8)
combinationSum = function(numbers, target){
numbers = numbers[order(numbers, decreasing = FALSE)]
# make a list of lists of vectors
dp = list()
for(i in 1:target){
dp[[i]] = list()
}
for(i in 1:target){
for(n in numbers){
if(n > i){
break
}
if(n == i){
dp[[i]] = append(dp[[i]], list(n))
}else{
if(length(dp[[i-n]]) > 0){
for(j in 1:length(dp[[i-n]])){
currnums = dp[[i-n]][[j]]
if(length(currnums) == 1){
lastnum = currnums
}else{
lastnum = currnums[length(currnums)]
}
if(n >= lastnum){
dp[[i]] = append(dp[[i]], list(c(dp[[i-n]][[j]], n)))
}
}
}
}
}
}
return(dp[[target]])
}
res = combinationSum(c(2,3,5),8)
res
load("SampleBatchR.RData")
numbers = unique(curr_batch_pid[,N])
target = max_n_per_batch
res = combinationSum(numbers, target)
res
combination_sum(c(2,3,5), 8)
#' Each value in \code{numbers} can be used unlimited times.
#'
#' @param numbers vector of possible integers
#' @param target integer, target sum
#'
#' @return list of vectors
#' @export
#'
#' @examples
#' combination_sum(c(2,3,5), 8)
combination_sum = function(numbers, target){
numbers = numbers[order(numbers, decreasing = FALSE)]
# make a list of lists of vectors
dp = list()
for(i in 1:target){
dp[[i]] = list()
}
for(i in 1:target){
for(n in numbers){
if(n > i){
break
}
if(n == i){
dp[[i]] = append(dp[[i]], list(n))
}else{
if(length(dp[[i-n]]) > 0){
for(j in 1:length(dp[[i-n]])){
currnums = dp[[i-n]][[j]]
if(length(currnums) == 1){
lastnum = currnums
}else{
lastnum = currnums[length(currnums)]
}
if(n >= lastnum){
dp[[i]] = append(dp[[i]], list(c(dp[[i-n]][[j]], n)))
}
}
}
}
}
}
return(dp[[target]])
}
combination_sum(c(2,3,5), 8)
combination_sum(c(1,2,3,5), 8)
head(curr_batch_pid)
table(curr_batch_pid[,N])
list(table(curr_batch_pid[,N]))
